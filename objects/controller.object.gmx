<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar Round;
//globalvar wave;
globalvar player_base_health;
globalvar enemy_base_health;
globalvar ammo;
globalvar bullet_damage;
globalvar player_score;
//globalvar morph;
globalvar spawn_limit;
globalvar pause;
globalvar player_health;
globalvar portal;
globalvar muzzle;
globalvar kernal_damage;
globalvar portal_damage;
globalvar spawners;
globalvar kernal;

Round = 0;
//wave = 0;
player_base_health = 100;
enemy_base_health = 25;
ammo = 0;
bullet_damage = 15;
player_score = 0;
//morph = 0;
spawn_limit = 0;
pause = 0;
player_health = 100;
portal = 0;
muzzle = 0;
kernal_damage = 5;
portal_damage = 20;
kernal = 0;

enum states {
    alive,
    dead
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
// Input variables for debug room traversal
var kRestart, kExit, kPrev, kNext;

kRestart = keyboard_check_pressed(ord('R'));
kExit    = keyboard_check_pressed(vk_escape);
kPrev    = keyboard_check_pressed(vk_subtract);
kNext    = keyboard_check_pressed(vk_add);

if (kRestart)
    room_restart();
if (kExit)
    game_end();
    
// Iterate through rooms backward
if (kPrev) {
    if (room == room_first)
        room_goto(room_last);
    else
        room_goto_previous();
}

// Iterate through rooms forwards
if (kNext) {
    if (room == room_last)
        room_goto(room_first);
    else
        room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != rm_victory {
    if (!pause) {
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_left);
        draw_set_font(fnt_menu);
        
        draw_sprite_stretched(spr_health_ui, 0,16, 16, 96, 24);
        draw_text(74, 17, string(player_health));
                     
        draw_sprite_stretched(spr_score, 0, (view_wport / 2) - 95, 16, 190, 20);
        draw_text((view_wport / 2), 16, "Round: " + string(Round) + "     " + "Score: " + string(player_score));
        
        draw_set_halign(fa_left);
        draw_set_colour(c_black);
        draw_sprite_stretched(spr_pumpkin_seed_bullet, 0,16, view_hport - 48, 40, 40);
        draw_text(29, view_hport - 40, string(ammo));
        
        draw_sprite_stretched(spr_kernal, 0, 64, view_hport - 48, 40, 40);
        draw_text(84, view_hport - 40, string(kernal));
        
        draw_set_colour(c_white);
        
        draw_text(view_wport - 70, 8, "P_ause");

    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
